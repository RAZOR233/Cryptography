poly=0x11b
Rcon=[0x01000000, 0x02000000, 0x04000000, 0x08000000, 0x10000000,0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000]
Sbox=[0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76,0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0,0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15,0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75,0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84,0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf,0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8,0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2,0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73,0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb,0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79,0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08,0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a,0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e,0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf,0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16]
nSbox=[0x52,0x09,0x6a,0xd5,0x30,0x36,0xa5,0x38,0xbf,0x40,0xa3,0x9e,0x81,0xf3,0xd7,0xfb,0x7c,0xe3,0x39,0x82,0x9b,0x2f,0xff,0x87,0x34,0x8e,0x43,0x44,0xc4,0xde,0xe9,0xcb,0x54,0x7b,0x94,0x32,0xa6,0xc2,0x23,0x3d,0xee,0x4c,0x95,0x0b,0x42,0xfa,0xc3,0x4e,0x08,0x2e,0xa1,0x66,0x28,0xd9,0x24,0xb2,0x76,0x5b,0xa2,0x49,0x6d,0x8b,0xd1,0x25,0x72,0xf8,0xf6,0x64,0x86,0x68,0x98,0x16,0xd4,0xa4,0x5c,0xcc,0x5d,0x65,0xb6,0x92,0x6c,0x70,0x48,0x50,0xfd,0xed,0xb9,0xda,0x5e,0x15,0x46,0x57,0xa7,0x8d,0x9d,0x84,0x90,0xd8,0xab,0x00,0x8c,0xbc,0xd3,0x0a,0xf7,0xe4,0x58,0x05,0xb8,0xb3,0x45,0x06,0xd0,0x2c,0x1e,0x8f,0xca,0x3f,0x0f,0x02,0xc1,0xaf,0xbd,0x03,0x01,0x13,0x8a,0x6b,0x3a,0x91,0x11,0x41,0x4f,0x67,0xdc,0xea,0x97,0xf2,0xcf,0xce,0xf0,0xb4,0xe6,0x73,0x96,0xac,0x74,0x22,0xe7,0xad,0x35,0x85,0xe2,0xf9,0x37,0xe8,0x1c,0x75,0xdf,0x6e,0x47,0xf1,0x1a,0x71,0x1d,0x29,0xc5,0x89,0x6f,0xb7,0x62,0x0e,0xaa,0x18,0xbe,0x1b,0xfc,0x56,0x3e,0x4b,0xc6,0xd2,0x79,0x20,0x9a,0xdb,0xc0,0xfe,0x78,0xcd,0x5a,0xf4,0x1f,0xdd,0xa8,0x33,0x88,0x07,0xc7,0x31,0xb1,0x12,0x10,0x59,0x27,0x80,0xec,0x5f,0x60,0x51,0x7f,0xa9,0x19,0xb5,0x4a,0x0d,0x2d,0xe5,0x7a,0x9f,0x93,0xc9,0x9c,0xef,0xa0,0xe0,0x3b,0x4d,0xae,0x2a,0xf5,0xb0,0xc8,0xeb,0xbb,0x3c,0x83,0x53,0x99,0x61,0x17,0x2b,0x04,0x7e,0xba,0x77,0xd6,0x26,0xe1,0x69,0x14,0x63,0x55,0x21,0x0c,0x7d]
M=[[2,3,1,1],[1,2,3,1],[1,1,2,3],[3,1,1,2]]
def SBox(t):
    l=0b1111
    h=t&l
    y=t>>4
    return Sbox[h+16*y]
def nSBox(t):
    l=0b1111
    h=t&l
    y=t>>4
    return nSbox[h+16*y]
def left_move(t,n):
    list='{:08x}'.format(t)
    tmp=list[n:len(list)] + list[0:n]
    return int(tmp,16)
def hang_move(list):
    t=[[0 for i in range(0,4)]for j in range(0,4)]
    for i in range(0,4):
        for j in range(0,4):
            t[i][j]=list[i][(j+i)%4]
    return t
def nhang_move(list):
    t=[[0 for i in range(0,4)]for j in range(0,4)]
    for i in range(0,4):
        for j in range(0,4):
            t[i][j]=list[i][(j-i+4)%4]
    return t
def key_create(k):
    w = [0 for i in range(0, 44)]
    for i in range(0, 4):
        w[3 - i] = (k >> i * 32) & 0b11111111111111111111111111111111
    for i in range(4, 44):
        if i % 4 != 0:
            w[i] = w[i - 1] ^ w[i - 4]
        else:
            t = left_move(w[i - 1], 2)
            subword = 0
            for j in range(0, 4):
                tmp = (t >> j * 8) & 0b11111111
                subword += SBox(tmp) << 8 * j
            w[i] = subword ^ Rcon[i // 4 - 1] ^ w[i - 4]
    return w
def key_plus(list,k,n):
    output=[[0 for i in range(0,4)]for j in range(0,4)]
    for j in range(0, 4):
        for i in range(0, 4):
            output[3-i][j]=list[3-i][j]^((k[4*n+j]>>i*8)&0b11111111)
            # print(hex((k[4*n+j]>>i*8)&0b11111111),hex(list[n][3-i][j]),hex(output[3-i][j]))
    return output
def multiply(a,b):
    ans=0
    while b>0:
        if b&1==1:
            ans^=a
        a<<=1
        if a&int('0x100',16)==int('0x100',16):
            a^=poly
        a&=int('0xff',16)
        b>>=1
    return ans
def lie_move(list):
    s=[[0 for i in range(0,4)]for j in range(0,4)]
    for j in range(0,4):
        s[0][j]=multiply(2,list[0][j])^multiply(3,list[1][j])^list[2][j]^list[3][j]
        s[1][j] = multiply(2, list[1][j]) ^ multiply(3, list[2][j]) ^ list[0][j] ^ list[3][j]
        s[2][j] = multiply(2, list[2][j]) ^ multiply(3, list[3][j]) ^ list[0][j] ^ list[1][j]
        s[3][j] = multiply(3, list[0][j]) ^ multiply(2, list[3][j]) ^ list[1][j] ^ list[2][j]
    return s
def nlie_move(list):
    s=[[0 for i in range(0,4)]for j in range(0,4)]
    for j in range(0,4):
        s[0][j]=multiply(0xe,list[0][j])^multiply(0xb,list[1][j])^multiply(0xd,list[2][j])^multiply(9,list[3][j])
        s[1][j] =multiply(0x9,list[0][j])^multiply(0xe,list[1][j])^multiply(0xb,list[2][j])^multiply(0xd,list[3][j])
        s[2][j] =multiply(0xd,list[0][j])^multiply(0x9,list[1][j])^multiply(0xe,list[2][j])^multiply(0xb,list[3][j])
        s[3][j] =multiply(0xb,list[0][j])^multiply(0xd,list[1][j])^multiply(0x9,list[2][j])^multiply(0xe,list[3][j])
    return s
def outprint(t,k):
    print(k)
    for i in range(0, 4):
        for j in range(0, 4):
            print(hex(t[i][j]), end=' ')
        print('')
def encode(s,w):
    m = [[[0 for i in range(0, 4)] for j in range(0, 4)] for o in range(0, 12)]
    for j in range(0, 4):
        for i in range(0, 4):
            m[0][3 - i][3 - j] = s & 0b11111111
            s = s >> 8
    # 初始轮密钥加
    m[1] = key_plus(m[0], w, 0)

    t = [[0 for i in range(0, 4)] for j in range(0, 4)]
    for k in range(1, 11):
        # 字节代替
        for i in range(0, 4):
            for j in range(0, 4):
                t[i][j] = SBox(m[k][i][j])
        # 行移位
        tmp = hang_move(t)
        # 列混淆?
        if (k != 10):
            t = lie_move(tmp)
        else:
            t = tmp
        # 轮密钥加
        m[k + 1] = key_plus(t, w, k)
    output = ''
    for i in range(0, 4):
        for j in range(0, 4):
            output = output + '{:02x}'.format(m[11][j][i])
    return int(output,16)
def decode(s,w):
    m = [[[0 for i in range(0, 4)] for j in range(0, 4)] for o in range(0, 12)]
    for j in range(0, 4):
        for i in range(0, 4):
            m[0][3 - i][3 - j] = s & 0b11111111
            s = s >> 8
    # 初始轮密钥加
    m[1] = key_plus(m[0], w, 10)
    t = [[0 for i in range(0, 4)] for j in range(0, 4)]
    for k in range(1, 11):
        # 字节代替
        for i in range(0, 4):
            for j in range(0, 4):
                t[i][j] = nSBox(m[k][i][j])
        # outprint(t, k)
        # 行移位
        tmp = nhang_move(t)
        # outprint(tmp, k)
        # 轮密钥加
        t = key_plus(tmp, w, 10 - k)
        # outprint(t, k)
        # 列混淆?
        if (k != 10):
            tmp = nlie_move(t)
        else:
            tmp = t
        # outprint(tmp, k)
        m[k+1]=tmp
        # 轮密钥加
        # m[k + 1] =
    output = ''
    for i in range(0, 4):
        for j in range(0, 4):
            output = output + '{:02x}'.format(m[11][j][i])
    return int(output,16)

'''
39
0x0123456789abcdeffedcba9876543210
0x0f1571c947d9e8590cb7add6af7f6798
0
1
00112233445566778899aabbccddeeff
000102030405060708090a0b0c0d0e0f
1
1
0x69c4e0d86a7b0430d8cdb78070b4c55a
0x000102030405060708090a0b0c0d0e0f
0
'''

n=int(input())
s=int(input(),16)
k=int(input(),16)
op=int(input())
w=key_create(k)
for i in range(0,n):
    if op==1:
        s=encode(s, w)
    else:
        s = decode(s, w)
print('0x' + '{:032x}'.format(s))

